// Code generated by "stringer -type Feature -trimprefix Feat -bitmask -output avfs_feature.go"; DO NOT EDIT.

package avfs

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FeatAbsPath-1]
	_ = x[FeatBasicFs-2]
	_ = x[FeatChroot-4]
	_ = x[FeatMainDirs-8]
	_ = x[FeatHardlink-16]
	_ = x[FeatIdentityMgr-32]
	_ = x[FeatReadOnly-64]
	_ = x[FeatRealFS-128]
	_ = x[FeatSymlink-256]
}

const _Feature_name = "AbsPathBasicFsChrootMainDirsHardlinkIdentityMgrReadOnlyRealFSSymlink"

var _Feature_map = map[Feature]string{
	1:   _Feature_name[0:7],
	2:   _Feature_name[7:14],
	4:   _Feature_name[14:20],
	8:   _Feature_name[20:28],
	16:  _Feature_name[28:36],
	32:  _Feature_name[36:47],
	64:  _Feature_name[47:55],
	128: _Feature_name[55:61],
	256: _Feature_name[61:68],
}

func (i Feature) String() string {
	if i <= 0 {
		return "Feature()"
	}
	sb := make([]byte, 0, len(_Feature_name)/2)
	sb = append(sb, []byte("Feature(")...)
	for mask := Feature(1); mask > 0 && mask <= i; mask <<= 1 {
		val := i & mask
		if val == 0 {
			continue
		}
		str, ok := _Feature_map[val]
		if !ok {
			str = "0x" + strconv.FormatUint(uint64(val), 16)
		}
		sb = append(sb, []byte(str)...)
		sb = append(sb, '|')
	}
	sb[len(sb)-1] = ')'
	return string(sb)
}

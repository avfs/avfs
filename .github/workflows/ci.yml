name: CI
on: [push, pull_request]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        go: [1.18.x]
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup cache
        # See doc https://github.com/mvdan/github-actions-golang
        uses: actions/cache@v3
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: go-${{ matrix.go }}-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-${{ matrix.go }}-${{ runner.os }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}

      - name: golangci-lint on linux
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        uses: golangci/golangci-lint-action@v3

      - name: Install mage & avfs binaries
        run: go run mage/build.go

      - name: Run tests as root on linux
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        # preserve user environment variables :
        # for some reason go version as root is different from user version.
        run: sudo -E env "PATH=$PATH" avfs test

      - name: Run tests on non linux systems
        if: ${{ !startsWith(matrix.os, 'ubuntu') }}
        run: avfs test

      - name: Run race tests
        run: avfs race

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        env:
          OS: ${{ matrix.os }}
          GO: ${{ matrix.go }}
        with:
          env_vars: OS,GO
          files: ./tmp/cover_test.txt,./tmp/cover_race.txt
          flags: unittests
          verbose: true

      - name: Run build tests on linux systems only
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: avfs testbuild


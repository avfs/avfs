run:
  timeout: 1m
  max-same-issues: 0

# all available settings of specific linters
linters-settings:
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 4
  errcheck:
    check-type-assertions: true
    check-blank: false
  funlen:
    lines: 60
    statements: 40
  goconst:
    min-len: 3
    min-occurrences: 3
  gocritic:
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - commentedOutCode
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
  godot:
    # comments to be checked: `declarations`, `toplevel`, or `all`
    scope: declarations
    # check that each sentence starts with a capital letter
    capital: true
  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - NOTE
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-arounds that should be removed before merging
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  govet:
    # report about shadowed variables
    check-shadowing: true

    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # enable or disable analyzers by name
    # run `go tool vet help` to see all analyzers
    enable-all: true
    disable-all: false
  lll:
    line-length: 140
    tab-width: 1
  misspell:
    locale: US
  nakedret:
    max-func-lines: 30
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  nolintlint:
    # Enable to ensure that nolint directives are all used. Default is true.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space. Default is true.
    allow-leading-space: true
    # Exclude following linters from requiring an explanation.  Default is [].
    allow-no-explanation: []
    # Enable to require an explanation of nonzero length after each nolint directive. Default is false.
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.
    require-specific: true
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature
  wsl:
    # If true append is only allowed to be cuddled if appending value is
    # matching variables, fields or types on line above. Default is true.
    strict-append: true
    # Allow calls and assignments to be cuddled as long as the lines have any
    # matching variables, fields or types. Default is true.
    allow-assign-and-call: true
    # Allow multiline assignments to be cuddled. Default is true.
    allow-multiline-assign: true
    # Allow declarations (var) to be cuddled.
    allow-cuddle-declarations: false
    # Allow trailing comments in ending of blocks
    allow-trailing-comment: false
    # Force newlines in end of case at this limit (0 = never).
    force-case-trailing-whitespace: 0
    # Force cuddling of err checks with err var assignment
    force-err-cuddling: false
    # Allow leading comments to be separated with empty liens
    allow-separated-leading-comment: false
  gofumpt:
    # Choose whether or not to use the extra rules that are disabled
    # by default
    extra-rules: false
  errorlint:
    # Report non-wrapping error creation using fmt.Errorf
    errorf: true
  makezero:
    # Allow only slices initialized with a length of zero. Default is false.
    always: false

linters:
  disable-all: true
  enable:
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - contextcheck
    #- cyclop
    - deadcode
    - decorder
    - depguard
    - dogsled
    - durationcheck
    #- dupl
    - errcheck
    - errchkjson
    - errname
    #- errorlint
    #- exhaustive
    #- exhaustivestruct
    - exportloopref
    - forbidigo
    - forcetypeassert
    #- funlen
    - gci
    - gochecknoglobals
    - gochecknoinits
    #- gocognit
    #- goconst
    #- gocritic
    #- gocyclo
    #- godot
    - godox
    #- goerr113
    - gofmt
    - gofumpt
    #- goheader
    - goimports
    #- golint
    #- gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    #- gosec
    - gosimple
    - govet
    - grouper
    #- ifshort
    - ineffassign
    - importas
    #- interfacer
    #- ireturn
    - lll
    - makezero
    #- maligned
    #- nestif
    - misspell
    - nakedret
    #- nilerr
    - nlreturn
    #- nestif
    #- nilerr
    - nilnil
    - noctx
    - nolintlint
    #- paralleltest
    - prealloc
    - predeclared
    - promlinter
    - revive
    #- rowserrcheck
    #- scopelint
    - sqlclosecheck
    - staticcheck
    - structcheck
    - stylecheck
    - tagliatelle
    - tenv
    - testpackage
    #- thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - varcheck
    #- varnamelen
    - vet
    - wastedassign
    - whitespace
    #- wrapcheck
    - wsl

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - text: ".*id.* should be .*ID.*"
      linters:
        - revive
        - stylecheck
    - text: "exported: exported const"
      linters:
        - revive
    - text: "Line contains TODO/BUG/FIXME"
      linters:
        - godox
    - text: "appendAssign: append result not assigned to the same slice"
      linters:
        - gocritic
    - text: "unexported-return: exported func Check"
      path: "test"
      linters:
        - revive
    - source: "// "
      linters:
        - lll

run:
  timeout: 1m
  max-same-issues: 0

linters-settings:
  dupl:
    threshold: 100
  funlen:
    lines: 120
    statements: 60
  goconst:
    min-len: 2
    min-occurrences: 4
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - preferStringWriter
  gomnd:
    # don't include the "operation" and "assign"
    checks:
      - argument
      - case
      - condition
      - return
    ignored-numbers:
      - '0'
      - '1'
      - '2'
      - '3'
    ignored-functions:
      - strings.SplitN
  govet:
    enable-all: true
    disable: fieldalignment
  lll:
    line-length: 140
  misspell:
    locale: US
  revive:
    rules:
      - name: cyclomatic
        severity: warning
        arguments: [20]
      - name: line-length-limit
        severity: error
        arguments: [140]
      - name: unused-parameter
        disabled: true

linters:
  enable:
    - asasalint # check for pass []any as any in variadic func(...any)
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk # Checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully
    - canonicalheader # checks whether net/http.Header uses canonical header
    - containedctx # containedctx is a linter that detects struct contained context.Context field
    - contextcheck # check whether the function uses a non-inherited context
    - copyloopvar # copyloopvar is a linter detects places where loop variables are copied
    - decorder # check declaration order and count of types, constants, variables and functions
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - durationcheck # check for two durations multiplied together
    - dupword # checks for duplicate words in the source code
    - errcheck # errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases
    - errchkjson # Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    - errname # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`.
    - exportloopref # checks for pointers to enclosing loop variables
    - fatcontext # detects nested contexts in loops
    - forbidigo # Forbids identifiers
    - forcetypeassert # finds forced type assertions
    - funlen # Tool for detection of long functions
    - gci # Gci controls Go package import order and makes it always deterministic.
    - ginkgolinter # enforces standards of using ginkgo and gomega
    - gocheckcompilerdirectives # Checks that go compiler directive comments (//go:) are valid.
    - gochecknoglobals # check that no global variables exist
    - gochecknoinits # Checks that no init functions are present in Go code
    - gochecksumtype # Run exhaustiveness checks on Go "sum types"
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # Provides diagnostics that check for bugs, performance and style issues.
    - godot # Check if comments end in a period
    - godox # Tool for detection of FIXME, TODO and other comment keywords
    - gofmt # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - gofumpt # Gofumpt checks whether code was gofumpt-ed.
    - goheader # Checks is file header matches to pattern
    - goimports # Check import statements are formatted according to the 'goimport' command. Reformat imports in autofix mode.
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - gomodguard # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end
    - gosimple # (megacheck): Linter for Go source code that specializes in simplifying code
    - gosmopolitan # Report certain i18n/l10n anti-patterns in your Go codebase
    - govet # (vet, vetshadow) Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - grouper # An analyzer to analyze expression groups.
    - importas # Enforces consistent import aliases
    - inamedparam # reports interfaces with unnamed method parameters
    - intrange # intrange is a linter to find places where for loops could make use of an integer range.
    - ineffassign # Detects when assignments to existing variables are not used
    - lll # Reports long lines
    - loggercheck # (logrlint) Checks key value pairs for common logger libraries (kitlog,klog,logr,zap).
    - makezero # Finds slice declarations with non-zero initial length
    - maintidx # maintidx measures the maintainability index of each function.
    - mirror # reports wrong mirror patterns of bytes/strings usage
    - misspell # Finds commonly misspelled English words in comments
    - musttag # enforce field tags in (un)marshaled structs
    - nilnil # Checks that there is no simultaneous return of `nil` error and an invalid value.
    - nlreturn # nlreturn checks for a new line before return and branch statements to increase code clarity
    - noctx # noctx finds sending http request without context.Context
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL.
    - nolintlint # Reports ill-formed or insufficient nolint directives
    - perfsprint # Checks that fmt.Sprintf can be replaced with a faster alternative.
    - prealloc # Finds slice declarations that could potentially be pre-allocated
    - predeclared # find code that shadows one of Go's predeclared identifiers
    - promlinter # Check Prometheus metrics naming via promlint
    - protogetter # Reports direct reads from proto message fields when getters should be used
    - reassign # Checks that package variables are not reassigned
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - rowserrcheck # checks whether Err of rows is checked successfully
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed.
    - staticcheck # (megacheck) It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint.
    - stylecheck # Stylecheck is a replacement for golint
    - tagalign # check that struct tags are well aligned
    - tagliatelle # Checks the struct tags.
    - tenv # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - testableexamples # linter checks if examples are testable (have an expected output)
    - testpackage # linter that makes you use a separate _test package
    - tparallel # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert # Remove unnecessary type conversions
    - unparam # Reports unused function parameters
    - unused # (megacheck) Checks Go code for unused constants, variables, functions and types
    - usestdlibvars # A linter that detect the possibility to use variables/constants from the Go standard library.
    - wastedassign # wastedassign finds wasted assignment statements.
    - whitespace # Tool for detection of leading and trailing whitespace
    - wsl # Whitespace Linter - Forces you to use empty lines!

  disable:
    - cyclop # checks function and package cyclomatic complexity
    - depguard # Go linter that checks if package imports are in a list of acceptable packages
    - dupl # Tool for code clone detection
    - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - exhaustive # check exhaustiveness of enum switch statements
    - exhaustruct # Checks if all structure fields are initialized
    - gocognit # Computes and checks the cognitive complexity of functions
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - goerr113 # Go linter to check the errors handling expressions
    - gomnd # An analyzer to detect magic numbers.
    - gosec # (gas): Inspects source code for security problems
    - interfacebloat # A linter that checks the number of methods inside an interface.
    - ireturn # Accept Interfaces, Return Concrete Types
    - nakedret # Finds naked returns in functions greater than a specified function length
    - nestif # Reports deeply nested if statements
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil.
    - nonamedreturns # Reports all named returns
    - paralleltest # paralleltest detects missing usage of t.Parallel() method in your Go test
    - thelper # thelper detects Go test helpers without t.Helper() call and checks the consistency of test helpers
    - varnamelen # checks that the length of a variable's name matches its scope
    - wrapcheck # Checks that errors returned from external packages are wrapped

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - text: ".*id.* should be .*ID.*"
      linters:
        - revive
        - stylecheck
    - text: "Line contains TODO/BUG/FIXME"
      linters:
        - godox
    - path: "test"
      text: "cyclomatic:"
      linters:
        - revive
    - path: "test"
      linters:
        - dogsled
        - dupl
        - funlen
        - goconst
        - gocritic
        - gomnd
        - maintidx
    - text: "S1040: type assertion to the same type"
      linters:
        - gosimple
    - path: "vfs_ostype_on.go"
      linters:
        - gocritic
        - intrange
        - revive

